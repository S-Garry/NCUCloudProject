{"ast":null,"code":"'use strict';\n\nvar _slicedToArray = require(\"/Users/kangkang/kypkk/ncu_cloud_project/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _toConsumableArray = require(\"/Users/kangkang/kypkk/ncu_cloud_project/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar tslib = require('tslib');\nvar heyListen = require('hey-listen');\nvar styleValueTypes = require('style-value-types');\nvar sync = require('framesync');\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\nvar sync__default = /*#__PURE__*/_interopDefaultLegacy(sync);\nvar clamp = function clamp(min, max, v) {\n  return Math.min(Math.max(v, min), max);\n};\nvar safeMin = 0.001;\nvar minDuration = 0.01;\nvar maxDuration = 10.0;\nvar minDamping = 0.05;\nvar maxDamping = 1;\nfunction findSpring(_ref) {\n  var _ref$duration = _ref.duration,\n    duration = _ref$duration === void 0 ? 800 : _ref$duration,\n    _ref$bounce = _ref.bounce,\n    bounce = _ref$bounce === void 0 ? 0.25 : _ref$bounce,\n    _ref$velocity = _ref.velocity,\n    velocity = _ref$velocity === void 0 ? 0 : _ref$velocity,\n    _ref$mass = _ref.mass,\n    mass = _ref$mass === void 0 ? 1 : _ref$mass;\n  var envelope;\n  var derivative;\n  heyListen.warning(duration <= maxDuration * 1000, \"Spring duration must be 10 seconds or less\");\n  var dampingRatio = 1 - bounce;\n  dampingRatio = clamp(minDamping, maxDamping, dampingRatio);\n  duration = clamp(minDuration, maxDuration, duration / 1000);\n  if (dampingRatio < 1) {\n    envelope = function envelope(undampedFreq) {\n      var exponentialDecay = undampedFreq * dampingRatio;\n      var delta = exponentialDecay * duration;\n      var a = exponentialDecay - velocity;\n      var b = calcAngularFreq(undampedFreq, dampingRatio);\n      var c = Math.exp(-delta);\n      return safeMin - a / b * c;\n    };\n    derivative = function derivative(undampedFreq) {\n      var exponentialDecay = undampedFreq * dampingRatio;\n      var delta = exponentialDecay * duration;\n      var d = delta * velocity + velocity;\n      var e = Math.pow(dampingRatio, 2) * Math.pow(undampedFreq, 2) * duration;\n      var f = Math.exp(-delta);\n      var g = calcAngularFreq(Math.pow(undampedFreq, 2), dampingRatio);\n      var factor = -envelope(undampedFreq) + safeMin > 0 ? -1 : 1;\n      return factor * ((d - e) * f) / g;\n    };\n  } else {\n    envelope = function envelope(undampedFreq) {\n      var a = Math.exp(-undampedFreq * duration);\n      var b = (undampedFreq - velocity) * duration + 1;\n      return -safeMin + a * b;\n    };\n    derivative = function derivative(undampedFreq) {\n      var a = Math.exp(-undampedFreq * duration);\n      var b = (velocity - undampedFreq) * (duration * duration);\n      return a * b;\n    };\n  }\n  var initialGuess = 5 / duration;\n  var undampedFreq = approximateRoot(envelope, derivative, initialGuess);\n  duration = duration * 1000;\n  if (isNaN(undampedFreq)) {\n    return {\n      stiffness: 100,\n      damping: 10,\n      duration: duration\n    };\n  } else {\n    var stiffness = Math.pow(undampedFreq, 2) * mass;\n    return {\n      stiffness: stiffness,\n      damping: dampingRatio * 2 * Math.sqrt(mass * stiffness),\n      duration: duration\n    };\n  }\n}\nvar rootIterations = 12;\nfunction approximateRoot(envelope, derivative, initialGuess) {\n  var result = initialGuess;\n  for (var i = 1; i < rootIterations; i++) {\n    result = result - envelope(result) / derivative(result);\n  }\n  return result;\n}\nfunction calcAngularFreq(undampedFreq, dampingRatio) {\n  return undampedFreq * Math.sqrt(1 - dampingRatio * dampingRatio);\n}\nvar durationKeys = [\"duration\", \"bounce\"];\nvar physicsKeys = [\"stiffness\", \"damping\", \"mass\"];\nfunction isSpringType(options, keys) {\n  return keys.some(function (key) {\n    return options[key] !== undefined;\n  });\n}\nfunction getSpringOptions(options) {\n  var springOptions = Object.assign({\n    velocity: 0.0,\n    stiffness: 100,\n    damping: 10,\n    mass: 1.0,\n    isResolvedFromDuration: false\n  }, options);\n  if (!isSpringType(options, physicsKeys) && isSpringType(options, durationKeys)) {\n    var derived = findSpring(options);\n    springOptions = Object.assign(Object.assign(Object.assign({}, springOptions), derived), {\n      velocity: 0.0,\n      mass: 1.0\n    });\n    springOptions.isResolvedFromDuration = true;\n  }\n  return springOptions;\n}\nfunction spring(_a) {\n  var _a$from = _a.from,\n    from = _a$from === void 0 ? 0.0 : _a$from,\n    _a$to = _a.to,\n    to = _a$to === void 0 ? 1.0 : _a$to,\n    _a$restSpeed = _a.restSpeed,\n    restSpeed = _a$restSpeed === void 0 ? 2 : _a$restSpeed,\n    restDelta = _a.restDelta,\n    options = tslib.__rest(_a, [\"from\", \"to\", \"restSpeed\", \"restDelta\"]);\n  var state = {\n    done: false,\n    value: from\n  };\n  var _getSpringOptions = getSpringOptions(options),\n    stiffness = _getSpringOptions.stiffness,\n    damping = _getSpringOptions.damping,\n    mass = _getSpringOptions.mass,\n    velocity = _getSpringOptions.velocity,\n    duration = _getSpringOptions.duration,\n    isResolvedFromDuration = _getSpringOptions.isResolvedFromDuration;\n  var resolveSpring = zero;\n  var resolveVelocity = zero;\n  function createSpring() {\n    var initialVelocity = velocity ? -(velocity / 1000) : 0.0;\n    var initialDelta = to - from;\n    var dampingRatio = damping / (2 * Math.sqrt(stiffness * mass));\n    var undampedAngularFreq = Math.sqrt(stiffness / mass) / 1000;\n    if (restDelta === undefined) {\n      restDelta = Math.min(Math.abs(to - from) / 100, 0.4);\n    }\n    if (dampingRatio < 1) {\n      var angularFreq = calcAngularFreq(undampedAngularFreq, dampingRatio);\n      resolveSpring = function resolveSpring(t) {\n        var envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);\n        return to - envelope * ((initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) / angularFreq * Math.sin(angularFreq * t) + initialDelta * Math.cos(angularFreq * t));\n      };\n      resolveVelocity = function resolveVelocity(t) {\n        var envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);\n        return dampingRatio * undampedAngularFreq * envelope * (Math.sin(angularFreq * t) * (initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) / angularFreq + initialDelta * Math.cos(angularFreq * t)) - envelope * (Math.cos(angularFreq * t) * (initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) - angularFreq * initialDelta * Math.sin(angularFreq * t));\n      };\n    } else if (dampingRatio === 1) {\n      resolveSpring = function resolveSpring(t) {\n        return to - Math.exp(-undampedAngularFreq * t) * (initialDelta + (initialVelocity + undampedAngularFreq * initialDelta) * t);\n      };\n    } else {\n      var dampedAngularFreq = undampedAngularFreq * Math.sqrt(dampingRatio * dampingRatio - 1);\n      resolveSpring = function resolveSpring(t) {\n        var envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);\n        var freqForT = Math.min(dampedAngularFreq * t, 300);\n        return to - envelope * ((initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) * Math.sinh(freqForT) + dampedAngularFreq * initialDelta * Math.cosh(freqForT)) / dampedAngularFreq;\n      };\n    }\n  }\n  createSpring();\n  return {\n    next: function next(t) {\n      var current = resolveSpring(t);\n      if (!isResolvedFromDuration) {\n        var currentVelocity = resolveVelocity(t) * 1000;\n        var isBelowVelocityThreshold = Math.abs(currentVelocity) <= restSpeed;\n        var isBelowDisplacementThreshold = Math.abs(to - current) <= restDelta;\n        state.done = isBelowVelocityThreshold && isBelowDisplacementThreshold;\n      } else {\n        state.done = t >= duration;\n      }\n      state.value = state.done ? to : current;\n      return state;\n    },\n    flipTarget: function flipTarget() {\n      velocity = -velocity;\n      var _ref2 = [to, from];\n      from = _ref2[0];\n      to = _ref2[1];\n      createSpring();\n    }\n  };\n}\nspring.needsInterpolation = function (a, b) {\n  return typeof a === \"string\" || typeof b === \"string\";\n};\nvar zero = function zero(_t) {\n  return 0;\n};\nvar progress = function progress(from, to, value) {\n  var toFromDifference = to - from;\n  return toFromDifference === 0 ? 1 : (value - from) / toFromDifference;\n};\nvar mix = function mix(from, to, progress) {\n  return -progress * from + progress * to + from;\n};\nfunction hueToRgb(p, q, t) {\n  if (t < 0) t += 1;\n  if (t > 1) t -= 1;\n  if (t < 1 / 6) return p + (q - p) * 6 * t;\n  if (t < 1 / 2) return q;\n  if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n  return p;\n}\nfunction hslaToRgba(_ref3) {\n  var hue = _ref3.hue,\n    saturation = _ref3.saturation,\n    lightness = _ref3.lightness,\n    alpha = _ref3.alpha;\n  hue /= 360;\n  saturation /= 100;\n  lightness /= 100;\n  var red = 0;\n  var green = 0;\n  var blue = 0;\n  if (!saturation) {\n    red = green = blue = lightness;\n  } else {\n    var q = lightness < 0.5 ? lightness * (1 + saturation) : lightness + saturation - lightness * saturation;\n    var p = 2 * lightness - q;\n    red = hueToRgb(p, q, hue + 1 / 3);\n    green = hueToRgb(p, q, hue);\n    blue = hueToRgb(p, q, hue - 1 / 3);\n  }\n  return {\n    red: Math.round(red * 255),\n    green: Math.round(green * 255),\n    blue: Math.round(blue * 255),\n    alpha: alpha\n  };\n}\nvar mixLinearColor = function mixLinearColor(from, to, v) {\n  var fromExpo = from * from;\n  var toExpo = to * to;\n  return Math.sqrt(Math.max(0, v * (toExpo - fromExpo) + fromExpo));\n};\nvar colorTypes = [styleValueTypes.hex, styleValueTypes.rgba, styleValueTypes.hsla];\nvar getColorType = function getColorType(v) {\n  return colorTypes.find(function (type) {\n    return type.test(v);\n  });\n};\nvar notAnimatable = function notAnimatable(color) {\n  return \"'\".concat(color, \"' is not an animatable color. Use the equivalent color code instead.\");\n};\nvar mixColor = function mixColor(from, to) {\n  var fromColorType = getColorType(from);\n  var toColorType = getColorType(to);\n  heyListen.invariant(!!fromColorType, notAnimatable(from));\n  heyListen.invariant(!!toColorType, notAnimatable(to));\n  var fromColor = fromColorType.parse(from);\n  var toColor = toColorType.parse(to);\n  if (fromColorType === styleValueTypes.hsla) {\n    fromColor = hslaToRgba(fromColor);\n    fromColorType = styleValueTypes.rgba;\n  }\n  if (toColorType === styleValueTypes.hsla) {\n    toColor = hslaToRgba(toColor);\n    toColorType = styleValueTypes.rgba;\n  }\n  var blended = Object.assign({}, fromColor);\n  return function (v) {\n    for (var key in blended) {\n      if (key !== \"alpha\") {\n        blended[key] = mixLinearColor(fromColor[key], toColor[key], v);\n      }\n    }\n    blended.alpha = mix(fromColor.alpha, toColor.alpha, v);\n    return fromColorType.transform(blended);\n  };\n};\nvar zeroPoint = {\n  x: 0,\n  y: 0,\n  z: 0\n};\nvar isNum = function isNum(v) {\n  return typeof v === 'number';\n};\nvar combineFunctions = function combineFunctions(a, b) {\n  return function (v) {\n    return b(a(v));\n  };\n};\nvar pipe = function pipe() {\n  for (var _len = arguments.length, transformers = new Array(_len), _key = 0; _key < _len; _key++) {\n    transformers[_key] = arguments[_key];\n  }\n  return transformers.reduce(combineFunctions);\n};\nfunction getMixer(origin, target) {\n  if (isNum(origin)) {\n    return function (v) {\n      return mix(origin, target, v);\n    };\n  } else if (styleValueTypes.color.test(origin)) {\n    return mixColor(origin, target);\n  } else {\n    return mixComplex(origin, target);\n  }\n}\nvar mixArray = function mixArray(from, to) {\n  var output = _toConsumableArray(from);\n  var numValues = output.length;\n  var blendValue = from.map(function (fromThis, i) {\n    return getMixer(fromThis, to[i]);\n  });\n  return function (v) {\n    for (var i = 0; i < numValues; i++) {\n      output[i] = blendValue[i](v);\n    }\n    return output;\n  };\n};\nvar mixObject = function mixObject(origin, target) {\n  var output = Object.assign(Object.assign({}, origin), target);\n  var blendValue = {};\n  for (var key in output) {\n    if (origin[key] !== undefined && target[key] !== undefined) {\n      blendValue[key] = getMixer(origin[key], target[key]);\n    }\n  }\n  return function (v) {\n    for (var _key2 in blendValue) {\n      output[_key2] = blendValue[_key2](v);\n    }\n    return output;\n  };\n};\nfunction analyse(value) {\n  var parsed = styleValueTypes.complex.parse(value);\n  var numValues = parsed.length;\n  var numNumbers = 0;\n  var numRGB = 0;\n  var numHSL = 0;\n  for (var i = 0; i < numValues; i++) {\n    if (numNumbers || typeof parsed[i] === \"number\") {\n      numNumbers++;\n    } else {\n      if (parsed[i].hue !== undefined) {\n        numHSL++;\n      } else {\n        numRGB++;\n      }\n    }\n  }\n  return {\n    parsed: parsed,\n    numNumbers: numNumbers,\n    numRGB: numRGB,\n    numHSL: numHSL\n  };\n}\nvar mixComplex = function mixComplex(origin, target) {\n  var template = styleValueTypes.complex.createTransformer(target);\n  var originStats = analyse(origin);\n  var targetStats = analyse(target);\n  var canInterpolate = originStats.numHSL === targetStats.numHSL && originStats.numRGB === targetStats.numRGB && originStats.numNumbers >= targetStats.numNumbers;\n  if (canInterpolate) {\n    return pipe(mixArray(originStats.parsed, targetStats.parsed), template);\n  } else {\n    heyListen.warning(true, \"Complex values '\".concat(origin, \"' and '\").concat(target, \"' too different to mix. Ensure all colors are of the same type, and that each contains the same quantity of number and color values. Falling back to instant transition.\"));\n    return function (p) {\n      return \"\".concat(p > 0 ? target : origin);\n    };\n  }\n};\nvar mixNumber = function mixNumber(from, to) {\n  return function (p) {\n    return mix(from, to, p);\n  };\n};\nfunction detectMixerFactory(v) {\n  if (typeof v === 'number') {\n    return mixNumber;\n  } else if (typeof v === 'string') {\n    if (styleValueTypes.color.test(v)) {\n      return mixColor;\n    } else {\n      return mixComplex;\n    }\n  } else if (Array.isArray(v)) {\n    return mixArray;\n  } else if (typeof v === 'object') {\n    return mixObject;\n  }\n}\nfunction createMixers(output, ease, customMixer) {\n  var mixers = [];\n  var mixerFactory = customMixer || detectMixerFactory(output[0]);\n  var numMixers = output.length - 1;\n  for (var i = 0; i < numMixers; i++) {\n    var mixer = mixerFactory(output[i], output[i + 1]);\n    if (ease) {\n      var easingFunction = Array.isArray(ease) ? ease[i] : ease;\n      mixer = pipe(easingFunction, mixer);\n    }\n    mixers.push(mixer);\n  }\n  return mixers;\n}\nfunction fastInterpolate(_ref4, _ref5) {\n  var _ref6 = _slicedToArray(_ref4, 2),\n    from = _ref6[0],\n    to = _ref6[1];\n  var _ref7 = _slicedToArray(_ref5, 1),\n    mixer = _ref7[0];\n  return function (v) {\n    return mixer(progress(from, to, v));\n  };\n}\nfunction slowInterpolate(input, mixers) {\n  var inputLength = input.length;\n  var lastInputIndex = inputLength - 1;\n  return function (v) {\n    var mixerIndex = 0;\n    var foundMixerIndex = false;\n    if (v <= input[0]) {\n      foundMixerIndex = true;\n    } else if (v >= input[lastInputIndex]) {\n      mixerIndex = lastInputIndex - 1;\n      foundMixerIndex = true;\n    }\n    if (!foundMixerIndex) {\n      var i = 1;\n      for (; i < inputLength; i++) {\n        if (input[i] > v || i === lastInputIndex) {\n          break;\n        }\n      }\n      mixerIndex = i - 1;\n    }\n    var progressInRange = progress(input[mixerIndex], input[mixerIndex + 1], v);\n    return mixers[mixerIndex](progressInRange);\n  };\n}\nfunction interpolate(input, output) {\n  var _ref8 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n    _ref8$clamp = _ref8.clamp,\n    isClamp = _ref8$clamp === void 0 ? true : _ref8$clamp,\n    ease = _ref8.ease,\n    mixer = _ref8.mixer;\n  var inputLength = input.length;\n  heyListen.invariant(inputLength === output.length, 'Both input and output ranges must be the same length');\n  heyListen.invariant(!ease || !Array.isArray(ease) || ease.length === inputLength - 1, 'Array of easing functions must be of length `input.length - 1`, as it applies to the transitions **between** the defined values.');\n  if (input[0] > input[inputLength - 1]) {\n    input = [].concat(input);\n    output = [].concat(output);\n    input.reverse();\n    output.reverse();\n  }\n  var mixers = createMixers(output, ease, mixer);\n  var interpolator = inputLength === 2 ? fastInterpolate(input, mixers) : slowInterpolate(input, mixers);\n  return isClamp ? function (v) {\n    return interpolator(clamp(input[0], input[inputLength - 1], v));\n  } : interpolator;\n}\nvar reverseEasing = function reverseEasing(easing) {\n  return function (p) {\n    return 1 - easing(1 - p);\n  };\n};\nvar mirrorEasing = function mirrorEasing(easing) {\n  return function (p) {\n    return p <= 0.5 ? easing(2 * p) / 2 : (2 - easing(2 * (1 - p))) / 2;\n  };\n};\nvar createExpoIn = function createExpoIn(power) {\n  return function (p) {\n    return Math.pow(p, power);\n  };\n};\nvar createBackIn = function createBackIn(power) {\n  return function (p) {\n    return p * p * ((power + 1) * p - power);\n  };\n};\nvar createAnticipate = function createAnticipate(power) {\n  var backEasing = createBackIn(power);\n  return function (p) {\n    return (p *= 2) < 1 ? 0.5 * backEasing(p) : 0.5 * (2 - Math.pow(2, -10 * (p - 1)));\n  };\n};\nvar DEFAULT_OVERSHOOT_STRENGTH = 1.525;\nvar BOUNCE_FIRST_THRESHOLD = 4.0 / 11.0;\nvar BOUNCE_SECOND_THRESHOLD = 8.0 / 11.0;\nvar BOUNCE_THIRD_THRESHOLD = 9.0 / 10.0;\nvar linear = function linear(p) {\n  return p;\n};\nvar easeIn = createExpoIn(2);\nvar easeOut = reverseEasing(easeIn);\nvar easeInOut = mirrorEasing(easeIn);\nvar circIn = function circIn(p) {\n  return 1 - Math.sin(Math.acos(p));\n};\nvar circOut = reverseEasing(circIn);\nvar circInOut = mirrorEasing(circOut);\nvar backIn = createBackIn(DEFAULT_OVERSHOOT_STRENGTH);\nvar backOut = reverseEasing(backIn);\nvar backInOut = mirrorEasing(backIn);\nvar anticipate = createAnticipate(DEFAULT_OVERSHOOT_STRENGTH);\nvar ca = 4356.0 / 361.0;\nvar cb = 35442.0 / 1805.0;\nvar cc = 16061.0 / 1805.0;\nvar bounceOut = function bounceOut(p) {\n  if (p === 1 || p === 0) return p;\n  var p2 = p * p;\n  return p < BOUNCE_FIRST_THRESHOLD ? 7.5625 * p2 : p < BOUNCE_SECOND_THRESHOLD ? 9.075 * p2 - 9.9 * p + 3.4 : p < BOUNCE_THIRD_THRESHOLD ? ca * p2 - cb * p + cc : 10.8 * p * p - 20.52 * p + 10.72;\n};\nvar bounceIn = reverseEasing(bounceOut);\nvar bounceInOut = function bounceInOut(p) {\n  return p < 0.5 ? 0.5 * (1.0 - bounceOut(1.0 - p * 2.0)) : 0.5 * bounceOut(p * 2.0 - 1.0) + 0.5;\n};\nfunction defaultEasing(values, easing) {\n  return values.map(function () {\n    return easing || easeInOut;\n  }).splice(0, values.length - 1);\n}\nfunction defaultOffset(values) {\n  var numValues = values.length;\n  return values.map(function (_value, i) {\n    return i !== 0 ? i / (numValues - 1) : 0;\n  });\n}\nfunction convertOffsetToTimes(offset, duration) {\n  return offset.map(function (o) {\n    return o * duration;\n  });\n}\nfunction keyframes(_ref9) {\n  var _ref9$from = _ref9.from,\n    from = _ref9$from === void 0 ? 0 : _ref9$from,\n    _ref9$to = _ref9.to,\n    to = _ref9$to === void 0 ? 1 : _ref9$to,\n    ease = _ref9.ease,\n    offset = _ref9.offset,\n    _ref9$duration = _ref9.duration,\n    duration = _ref9$duration === void 0 ? 300 : _ref9$duration;\n  var state = {\n    done: false,\n    value: from\n  };\n  var values = Array.isArray(to) ? to : [from, to];\n  var times = convertOffsetToTimes(offset && offset.length === values.length ? offset : defaultOffset(values), duration);\n  function createInterpolator() {\n    return interpolate(times, values, {\n      ease: Array.isArray(ease) ? ease : defaultEasing(values, ease)\n    });\n  }\n  var interpolator = createInterpolator();\n  return {\n    next: function next(t) {\n      state.value = interpolator(t);\n      state.done = t >= duration;\n      return state;\n    },\n    flipTarget: function flipTarget() {\n      values.reverse();\n      interpolator = createInterpolator();\n    }\n  };\n}\nfunction decay(_ref10) {\n  var _ref10$velocity = _ref10.velocity,\n    velocity = _ref10$velocity === void 0 ? 0 : _ref10$velocity,\n    _ref10$from = _ref10.from,\n    from = _ref10$from === void 0 ? 0 : _ref10$from,\n    _ref10$power = _ref10.power,\n    power = _ref10$power === void 0 ? 0.8 : _ref10$power,\n    _ref10$timeConstant = _ref10.timeConstant,\n    timeConstant = _ref10$timeConstant === void 0 ? 350 : _ref10$timeConstant,\n    _ref10$restDelta = _ref10.restDelta,\n    restDelta = _ref10$restDelta === void 0 ? 0.5 : _ref10$restDelta,\n    modifyTarget = _ref10.modifyTarget;\n  var state = {\n    done: false,\n    value: from\n  };\n  var amplitude = power * velocity;\n  var ideal = from + amplitude;\n  var target = modifyTarget === undefined ? ideal : modifyTarget(ideal);\n  if (target !== ideal) amplitude = target - from;\n  return {\n    next: function next(t) {\n      var delta = -amplitude * Math.exp(-t / timeConstant);\n      state.done = !(delta > restDelta || delta < -restDelta);\n      state.value = state.done ? target : target + delta;\n      return state;\n    },\n    flipTarget: function flipTarget() {}\n  };\n}\nvar types = {\n  keyframes: keyframes,\n  spring: spring,\n  decay: decay\n};\nfunction detectAnimationFromOptions(config) {\n  if (Array.isArray(config.to)) {\n    return keyframes;\n  } else if (types[config.type]) {\n    return types[config.type];\n  }\n  var keys = new Set(Object.keys(config));\n  if (keys.has(\"ease\") || keys.has(\"duration\") && !keys.has(\"dampingRatio\")) {\n    return keyframes;\n  } else if (keys.has(\"dampingRatio\") || keys.has(\"stiffness\") || keys.has(\"mass\") || keys.has(\"damping\") || keys.has(\"restSpeed\") || keys.has(\"restDelta\")) {\n    return spring;\n  }\n  return keyframes;\n}\nfunction loopElapsed(elapsed, duration) {\n  var delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  return elapsed - duration - delay;\n}\nfunction reverseElapsed(elapsed, duration) {\n  var delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var isForwardPlayback = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  return isForwardPlayback ? loopElapsed(duration + -elapsed, duration, delay) : duration - (elapsed - duration) + delay;\n}\nfunction hasRepeatDelayElapsed(elapsed, duration, delay, isForwardPlayback) {\n  return isForwardPlayback ? elapsed >= duration + delay : elapsed <= -delay;\n}\nvar framesync = function framesync(update) {\n  var passTimestamp = function passTimestamp(_ref11) {\n    var delta = _ref11.delta;\n    return update(delta);\n  };\n  return {\n    start: function start() {\n      return sync__default[\"default\"].update(passTimestamp, true);\n    },\n    stop: function stop() {\n      return sync.cancelSync.update(passTimestamp);\n    }\n  };\n};\nfunction animate(_a) {\n  var _b, _c;\n  var from = _a.from,\n    _a$autoplay = _a.autoplay,\n    autoplay = _a$autoplay === void 0 ? true : _a$autoplay,\n    _a$driver = _a.driver,\n    driver = _a$driver === void 0 ? framesync : _a$driver,\n    _a$elapsed = _a.elapsed,\n    elapsed = _a$elapsed === void 0 ? 0 : _a$elapsed,\n    _a$repeat = _a.repeat,\n    repeatMax = _a$repeat === void 0 ? 0 : _a$repeat,\n    _a$repeatType = _a.repeatType,\n    repeatType = _a$repeatType === void 0 ? \"loop\" : _a$repeatType,\n    _a$repeatDelay = _a.repeatDelay,\n    repeatDelay = _a$repeatDelay === void 0 ? 0 : _a$repeatDelay,\n    onPlay = _a.onPlay,\n    onStop = _a.onStop,\n    onComplete = _a.onComplete,\n    onRepeat = _a.onRepeat,\n    onUpdate = _a.onUpdate,\n    options = tslib.__rest(_a, [\"from\", \"autoplay\", \"driver\", \"elapsed\", \"repeat\", \"repeatType\", \"repeatDelay\", \"onPlay\", \"onStop\", \"onComplete\", \"onRepeat\", \"onUpdate\"]);\n  var to = options.to;\n  var driverControls;\n  var repeatCount = 0;\n  var computedDuration = options.duration;\n  var latest;\n  var isComplete = false;\n  var isForwardPlayback = true;\n  var interpolateFromNumber;\n  var animator = detectAnimationFromOptions(options);\n  if ((_c = (_b = animator).needsInterpolation) === null || _c === void 0 ? void 0 : _c.call(_b, from, to)) {\n    interpolateFromNumber = interpolate([0, 100], [from, to], {\n      clamp: false\n    });\n    from = 0;\n    to = 100;\n  }\n  var animation = animator(Object.assign(Object.assign({}, options), {\n    from: from,\n    to: to\n  }));\n  function repeat() {\n    repeatCount++;\n    if (repeatType === \"reverse\") {\n      isForwardPlayback = repeatCount % 2 === 0;\n      elapsed = reverseElapsed(elapsed, computedDuration, repeatDelay, isForwardPlayback);\n    } else {\n      elapsed = loopElapsed(elapsed, computedDuration, repeatDelay);\n      if (repeatType === \"mirror\") animation.flipTarget();\n    }\n    isComplete = false;\n    onRepeat && onRepeat();\n  }\n  function complete() {\n    driverControls.stop();\n    onComplete && onComplete();\n  }\n  function update(delta) {\n    if (!isForwardPlayback) delta = -delta;\n    elapsed += delta;\n    if (!isComplete) {\n      var state = animation.next(Math.max(0, elapsed));\n      latest = state.value;\n      if (interpolateFromNumber) latest = interpolateFromNumber(latest);\n      isComplete = isForwardPlayback ? state.done : elapsed <= 0;\n    }\n    onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(latest);\n    if (isComplete) {\n      if (repeatCount === 0) computedDuration !== null && computedDuration !== void 0 ? computedDuration : computedDuration = elapsed;\n      if (repeatCount < repeatMax) {\n        hasRepeatDelayElapsed(elapsed, computedDuration, repeatDelay, isForwardPlayback) && repeat();\n      } else {\n        complete();\n      }\n    }\n  }\n  function play() {\n    onPlay === null || onPlay === void 0 ? void 0 : onPlay();\n    driverControls = driver(update);\n    driverControls.start();\n  }\n  autoplay && play();\n  return {\n    stop: function stop() {\n      onStop === null || onStop === void 0 ? void 0 : onStop();\n      driverControls.stop();\n    }\n  };\n}\nfunction velocityPerSecond(velocity, frameDuration) {\n  return frameDuration ? velocity * (1000 / frameDuration) : 0;\n}\nfunction inertia(_ref12) {\n  var _ref12$from = _ref12.from,\n    from = _ref12$from === void 0 ? 0 : _ref12$from,\n    _ref12$velocity = _ref12.velocity,\n    velocity = _ref12$velocity === void 0 ? 0 : _ref12$velocity,\n    min = _ref12.min,\n    max = _ref12.max,\n    _ref12$power = _ref12.power,\n    power = _ref12$power === void 0 ? 0.8 : _ref12$power,\n    _ref12$timeConstant = _ref12.timeConstant,\n    timeConstant = _ref12$timeConstant === void 0 ? 750 : _ref12$timeConstant,\n    _ref12$bounceStiffnes = _ref12.bounceStiffness,\n    bounceStiffness = _ref12$bounceStiffnes === void 0 ? 500 : _ref12$bounceStiffnes,\n    _ref12$bounceDamping = _ref12.bounceDamping,\n    bounceDamping = _ref12$bounceDamping === void 0 ? 10 : _ref12$bounceDamping,\n    _ref12$restDelta = _ref12.restDelta,\n    restDelta = _ref12$restDelta === void 0 ? 1 : _ref12$restDelta,\n    modifyTarget = _ref12.modifyTarget,\n    driver = _ref12.driver,\n    _onUpdate = _ref12.onUpdate,\n    onComplete = _ref12.onComplete,\n    onStop = _ref12.onStop;\n  var currentAnimation;\n  function isOutOfBounds(v) {\n    return min !== undefined && v < min || max !== undefined && v > max;\n  }\n  function boundaryNearest(v) {\n    if (min === undefined) return max;\n    if (max === undefined) return min;\n    return Math.abs(min - v) < Math.abs(max - v) ? min : max;\n  }\n  function startAnimation(options) {\n    currentAnimation === null || currentAnimation === void 0 ? void 0 : currentAnimation.stop();\n    currentAnimation = animate(Object.assign(Object.assign({}, options), {\n      driver: driver,\n      onUpdate: function onUpdate(v) {\n        var _a;\n        _onUpdate === null || _onUpdate === void 0 ? void 0 : _onUpdate(v);\n        (_a = options.onUpdate) === null || _a === void 0 ? void 0 : _a.call(options, v);\n      },\n      onComplete: onComplete,\n      onStop: onStop\n    }));\n  }\n  function startSpring(options) {\n    startAnimation(Object.assign({\n      type: \"spring\",\n      stiffness: bounceStiffness,\n      damping: bounceDamping,\n      restDelta: restDelta\n    }, options));\n  }\n  if (isOutOfBounds(from)) {\n    startSpring({\n      from: from,\n      velocity: velocity,\n      to: boundaryNearest(from)\n    });\n  } else {\n    var target = power * velocity + from;\n    if (typeof modifyTarget !== \"undefined\") target = modifyTarget(target);\n    var boundary = boundaryNearest(target);\n    var heading = boundary === min ? -1 : 1;\n    var prev;\n    var current;\n    var checkBoundary = function checkBoundary(v) {\n      prev = current;\n      current = v;\n      velocity = velocityPerSecond(v - prev, sync.getFrameData().delta);\n      if (heading === 1 && v > boundary || heading === -1 && v < boundary) {\n        startSpring({\n          from: v,\n          to: boundary,\n          velocity: velocity\n        });\n      }\n    };\n    startAnimation({\n      type: \"decay\",\n      from: from,\n      velocity: velocity,\n      timeConstant: timeConstant,\n      power: power,\n      restDelta: restDelta,\n      modifyTarget: modifyTarget,\n      onUpdate: isOutOfBounds(target) ? checkBoundary : undefined\n    });\n  }\n  return {\n    stop: function stop() {\n      return currentAnimation === null || currentAnimation === void 0 ? void 0 : currentAnimation.stop();\n    }\n  };\n}\nvar radiansToDegrees = function radiansToDegrees(radians) {\n  return radians * 180 / Math.PI;\n};\nvar angle = function angle(a) {\n  var b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : zeroPoint;\n  return radiansToDegrees(Math.atan2(b.y - a.y, b.x - a.x));\n};\nvar applyOffset = function applyOffset(from, to) {\n  var hasReceivedFrom = true;\n  if (to === undefined) {\n    to = from;\n    hasReceivedFrom = false;\n  }\n  return function (v) {\n    if (hasReceivedFrom) {\n      return v - from + to;\n    } else {\n      from = v;\n      hasReceivedFrom = true;\n      return to;\n    }\n  };\n};\nvar identity = function identity(v) {\n  return v;\n};\nvar createAttractor = function createAttractor() {\n  var alterDisplacement = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : identity;\n  return function (constant, origin, v) {\n    var displacement = origin - v;\n    var springModifiedDisplacement = -(0 - constant + 1) * (0 - alterDisplacement(Math.abs(displacement)));\n    return displacement <= 0 ? origin + springModifiedDisplacement : origin - springModifiedDisplacement;\n  };\n};\nvar attract = createAttractor();\nvar attractExpo = createAttractor(Math.sqrt);\nvar degreesToRadians = function degreesToRadians(degrees) {\n  return degrees * Math.PI / 180;\n};\nvar isPoint = function isPoint(point) {\n  return point.hasOwnProperty('x') && point.hasOwnProperty('y');\n};\nvar isPoint3D = function isPoint3D(point) {\n  return isPoint(point) && point.hasOwnProperty('z');\n};\nvar distance1D = function distance1D(a, b) {\n  return Math.abs(a - b);\n};\nfunction distance(a, b) {\n  if (isNum(a) && isNum(b)) {\n    return distance1D(a, b);\n  } else if (isPoint(a) && isPoint(b)) {\n    var xDelta = distance1D(a.x, b.x);\n    var yDelta = distance1D(a.y, b.y);\n    var zDelta = isPoint3D(a) && isPoint3D(b) ? distance1D(a.z, b.z) : 0;\n    return Math.sqrt(Math.pow(xDelta, 2) + Math.pow(yDelta, 2) + Math.pow(zDelta, 2));\n  }\n}\nvar pointFromVector = function pointFromVector(origin, angle, distance) {\n  angle = degreesToRadians(angle);\n  return {\n    x: distance * Math.cos(angle) + origin.x,\n    y: distance * Math.sin(angle) + origin.y\n  };\n};\nvar toDecimal = function toDecimal(num) {\n  var precision = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n  precision = Math.pow(10, precision);\n  return Math.round(num * precision) / precision;\n};\nvar smoothFrame = function smoothFrame(prevValue, nextValue, duration) {\n  var smoothing = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  return toDecimal(prevValue + duration * (nextValue - prevValue) / Math.max(smoothing, duration));\n};\nvar smooth = function smooth() {\n  var strength = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 50;\n  var previousValue = 0;\n  var lastUpdated = 0;\n  return function (v) {\n    var currentFramestamp = sync.getFrameData().timestamp;\n    var timeDelta = currentFramestamp !== lastUpdated ? currentFramestamp - lastUpdated : 0;\n    var newValue = timeDelta ? smoothFrame(previousValue, v, timeDelta, strength) : previousValue;\n    lastUpdated = currentFramestamp;\n    previousValue = newValue;\n    return newValue;\n  };\n};\nvar snap = function snap(points) {\n  if (typeof points === 'number') {\n    return function (v) {\n      return Math.round(v / points) * points;\n    };\n  } else {\n    var i = 0;\n    var numPoints = points.length;\n    return function (v) {\n      var lastDistance = Math.abs(points[0] - v);\n      for (i = 1; i < numPoints; i++) {\n        var point = points[i];\n        var _distance = Math.abs(point - v);\n        if (_distance === 0) return point;\n        if (_distance > lastDistance) return points[i - 1];\n        if (i === numPoints - 1) return point;\n        lastDistance = _distance;\n      }\n    };\n  }\n};\nfunction velocityPerFrame(xps, frameDuration) {\n  return xps / (1000 / frameDuration);\n}\nvar wrap = function wrap(min, max, v) {\n  var rangeSize = max - min;\n  return ((v - min) % rangeSize + rangeSize) % rangeSize + min;\n};\nvar a = function a(a1, a2) {\n  return 1.0 - 3.0 * a2 + 3.0 * a1;\n};\nvar b = function b(a1, a2) {\n  return 3.0 * a2 - 6.0 * a1;\n};\nvar c = function c(a1) {\n  return 3.0 * a1;\n};\nvar calcBezier = function calcBezier(t, a1, a2) {\n  return ((a(a1, a2) * t + b(a1, a2)) * t + c(a1)) * t;\n};\nvar getSlope = function getSlope(t, a1, a2) {\n  return 3.0 * a(a1, a2) * t * t + 2.0 * b(a1, a2) * t + c(a1);\n};\nvar subdivisionPrecision = 0.0000001;\nvar subdivisionMaxIterations = 10;\nfunction binarySubdivide(aX, aA, aB, mX1, mX2) {\n  var currentX;\n  var currentT;\n  var i = 0;\n  do {\n    currentT = aA + (aB - aA) / 2.0;\n    currentX = calcBezier(currentT, mX1, mX2) - aX;\n    if (currentX > 0.0) {\n      aB = currentT;\n    } else {\n      aA = currentT;\n    }\n  } while (Math.abs(currentX) > subdivisionPrecision && ++i < subdivisionMaxIterations);\n  return currentT;\n}\nvar newtonIterations = 8;\nvar newtonMinSlope = 0.001;\nfunction newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {\n  for (var i = 0; i < newtonIterations; ++i) {\n    var currentSlope = getSlope(aGuessT, mX1, mX2);\n    if (currentSlope === 0.0) {\n      return aGuessT;\n    }\n    var currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n    aGuessT -= currentX / currentSlope;\n  }\n  return aGuessT;\n}\nvar kSplineTableSize = 11;\nvar kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\nfunction cubicBezier(mX1, mY1, mX2, mY2) {\n  if (mX1 === mY1 && mX2 === mY2) return linear;\n  var sampleValues = new Float32Array(kSplineTableSize);\n  for (var i = 0; i < kSplineTableSize; ++i) {\n    sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n  }\n  function getTForX(aX) {\n    var intervalStart = 0.0;\n    var currentSample = 1;\n    var lastSample = kSplineTableSize - 1;\n    for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {\n      intervalStart += kSampleStepSize;\n    }\n    --currentSample;\n    var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n    var guessForT = intervalStart + dist * kSampleStepSize;\n    var initialSlope = getSlope(guessForT, mX1, mX2);\n    if (initialSlope >= newtonMinSlope) {\n      return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n    } else if (initialSlope === 0.0) {\n      return guessForT;\n    } else {\n      return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);\n    }\n  }\n  return function (t) {\n    return t === 0 || t === 1 ? t : calcBezier(getTForX(t), mY1, mY2);\n  };\n}\nvar steps = function steps(_steps) {\n  var direction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'end';\n  return function (progress) {\n    progress = direction === 'end' ? Math.min(progress, 0.999) : Math.max(progress, 0.001);\n    var expanded = progress * _steps;\n    var rounded = direction === 'end' ? Math.floor(expanded) : Math.ceil(expanded);\n    return clamp(0, 1, rounded / _steps);\n  };\n};\nexports.angle = angle;\nexports.animate = animate;\nexports.anticipate = anticipate;\nexports.applyOffset = applyOffset;\nexports.attract = attract;\nexports.attractExpo = attractExpo;\nexports.backIn = backIn;\nexports.backInOut = backInOut;\nexports.backOut = backOut;\nexports.bounceIn = bounceIn;\nexports.bounceInOut = bounceInOut;\nexports.bounceOut = bounceOut;\nexports.circIn = circIn;\nexports.circInOut = circInOut;\nexports.circOut = circOut;\nexports.clamp = clamp;\nexports.createAnticipate = createAnticipate;\nexports.createAttractor = createAttractor;\nexports.createBackIn = createBackIn;\nexports.createExpoIn = createExpoIn;\nexports.cubicBezier = cubicBezier;\nexports.decay = decay;\nexports.degreesToRadians = degreesToRadians;\nexports.distance = distance;\nexports.easeIn = easeIn;\nexports.easeInOut = easeInOut;\nexports.easeOut = easeOut;\nexports.inertia = inertia;\nexports.interpolate = interpolate;\nexports.isPoint = isPoint;\nexports.isPoint3D = isPoint3D;\nexports.keyframes = keyframes;\nexports.linear = linear;\nexports.mirrorEasing = mirrorEasing;\nexports.mix = mix;\nexports.mixColor = mixColor;\nexports.mixComplex = mixComplex;\nexports.pipe = pipe;\nexports.pointFromVector = pointFromVector;\nexports.progress = progress;\nexports.radiansToDegrees = radiansToDegrees;\nexports.reverseEasing = reverseEasing;\nexports.smooth = smooth;\nexports.smoothFrame = smoothFrame;\nexports.snap = snap;\nexports.spring = spring;\nexports.steps = steps;\nexports.toDecimal = toDecimal;\nexports.velocityPerFrame = velocityPerFrame;\nexports.velocityPerSecond = velocityPerSecond;\nexports.wrap = wrap;","map":{"version":3,"names":["Object","defineProperty","exports","value","tslib","require","heyListen","styleValueTypes","sync","_interopDefaultLegacy","e","sync__default","clamp","min","max","v","Math","safeMin","minDuration","maxDuration","minDamping","maxDamping","findSpring","duration","bounce","velocity","mass","envelope","derivative","warning","dampingRatio","undampedFreq","exponentialDecay","delta","a","b","calcAngularFreq","c","exp","d","pow","f","g","factor","initialGuess","approximateRoot","isNaN","stiffness","damping","sqrt","rootIterations","result","i","durationKeys","physicsKeys","isSpringType","options","keys","some","key","undefined","getSpringOptions","springOptions","assign","isResolvedFromDuration","derived","spring","_a","from","to","restSpeed","restDelta","__rest","state","done","resolveSpring","zero","resolveVelocity","createSpring","initialVelocity","initialDelta","undampedAngularFreq","abs","angularFreq","t","sin","cos","dampedAngularFreq","freqForT","sinh","cosh","next","current","currentVelocity","isBelowVelocityThreshold","isBelowDisplacementThreshold","flipTarget","needsInterpolation","_t","progress","toFromDifference","mix","hueToRgb","p","q","hslaToRgba","hue","saturation","lightness","alpha","red","green","blue","round","mixLinearColor","fromExpo","toExpo","colorTypes","hex","rgba","hsla","getColorType","find","type","test","notAnimatable","color","mixColor","fromColorType","toColorType","invariant","fromColor","parse","toColor","blended","transform","zeroPoint","x","y","z","isNum","combineFunctions","pipe","transformers","reduce","getMixer","origin","target","mixComplex","mixArray","output","numValues","length","blendValue","map","fromThis","mixObject","analyse","parsed","complex","numNumbers","numRGB","numHSL","template","createTransformer","originStats","targetStats","canInterpolate","mixNumber","detectMixerFactory","Array","isArray","createMixers","ease","customMixer","mixers","mixerFactory","numMixers","mixer","easingFunction","push","fastInterpolate","slowInterpolate","input","inputLength","lastInputIndex","mixerIndex","foundMixerIndex","progressInRange","interpolate","isClamp","concat","reverse","interpolator","reverseEasing","easing","mirrorEasing","createExpoIn","power","createBackIn","createAnticipate","backEasing","DEFAULT_OVERSHOOT_STRENGTH","BOUNCE_FIRST_THRESHOLD","BOUNCE_SECOND_THRESHOLD","BOUNCE_THIRD_THRESHOLD","linear","easeIn","easeOut","easeInOut","circIn","acos","circOut","circInOut","backIn","backOut","backInOut","anticipate","ca","cb","cc","bounceOut","p2","bounceIn","bounceInOut","defaultEasing","values","splice","defaultOffset","_value","convertOffsetToTimes","offset","o","keyframes","times","createInterpolator","decay","timeConstant","modifyTarget","amplitude","ideal","types","detectAnimationFromOptions","config","Set","has","loopElapsed","elapsed","delay","reverseElapsed","isForwardPlayback","hasRepeatDelayElapsed","framesync","update","passTimestamp","start","stop","cancelSync","animate","_b","_c","autoplay","driver","repeat","repeatMax","repeatType","repeatDelay","onPlay","onStop","onComplete","onRepeat","onUpdate","driverControls","repeatCount","computedDuration","latest","isComplete","interpolateFromNumber","animator","call","animation","complete","play","velocityPerSecond","frameDuration","inertia","bounceStiffness","bounceDamping","currentAnimation","isOutOfBounds","boundaryNearest","startAnimation","startSpring","boundary","heading","prev","checkBoundary","getFrameData","radiansToDegrees","radians","PI","angle","atan2","applyOffset","hasReceivedFrom","identity","createAttractor","alterDisplacement","constant","displacement","springModifiedDisplacement","attract","attractExpo","degreesToRadians","degrees","isPoint","point","hasOwnProperty","isPoint3D","distance1D","distance","xDelta","yDelta","zDelta","pointFromVector","toDecimal","num","precision","smoothFrame","prevValue","nextValue","smoothing","smooth","strength","previousValue","lastUpdated","currentFramestamp","timestamp","timeDelta","newValue","snap","points","numPoints","lastDistance","velocityPerFrame","xps","wrap","rangeSize","a1","a2","calcBezier","getSlope","subdivisionPrecision","subdivisionMaxIterations","binarySubdivide","aX","aA","aB","mX1","mX2","currentX","currentT","newtonIterations","newtonMinSlope","newtonRaphsonIterate","aGuessT","currentSlope","kSplineTableSize","kSampleStepSize","cubicBezier","mY1","mY2","sampleValues","Float32Array","getTForX","intervalStart","currentSample","lastSample","dist","guessForT","initialSlope","steps","direction","expanded","rounded","floor","ceil"],"sources":["/Users/kangkang/kypkk/ncu_cloud_project/node_modules/popmotion/dist/popmotion.cjs.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar tslib = require('tslib');\nvar heyListen = require('hey-listen');\nvar styleValueTypes = require('style-value-types');\nvar sync = require('framesync');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar sync__default = /*#__PURE__*/_interopDefaultLegacy(sync);\n\nconst clamp = (min, max, v) => Math.min(Math.max(v, min), max);\n\nconst safeMin = 0.001;\nconst minDuration = 0.01;\nconst maxDuration = 10.0;\nconst minDamping = 0.05;\nconst maxDamping = 1;\nfunction findSpring({ duration = 800, bounce = 0.25, velocity = 0, mass = 1, }) {\n    let envelope;\n    let derivative;\n    heyListen.warning(duration <= maxDuration * 1000, \"Spring duration must be 10 seconds or less\");\n    let dampingRatio = 1 - bounce;\n    dampingRatio = clamp(minDamping, maxDamping, dampingRatio);\n    duration = clamp(minDuration, maxDuration, duration / 1000);\n    if (dampingRatio < 1) {\n        envelope = (undampedFreq) => {\n            const exponentialDecay = undampedFreq * dampingRatio;\n            const delta = exponentialDecay * duration;\n            const a = exponentialDecay - velocity;\n            const b = calcAngularFreq(undampedFreq, dampingRatio);\n            const c = Math.exp(-delta);\n            return safeMin - (a / b) * c;\n        };\n        derivative = (undampedFreq) => {\n            const exponentialDecay = undampedFreq * dampingRatio;\n            const delta = exponentialDecay * duration;\n            const d = delta * velocity + velocity;\n            const e = Math.pow(dampingRatio, 2) * Math.pow(undampedFreq, 2) * duration;\n            const f = Math.exp(-delta);\n            const g = calcAngularFreq(Math.pow(undampedFreq, 2), dampingRatio);\n            const factor = -envelope(undampedFreq) + safeMin > 0 ? -1 : 1;\n            return (factor * ((d - e) * f)) / g;\n        };\n    }\n    else {\n        envelope = (undampedFreq) => {\n            const a = Math.exp(-undampedFreq * duration);\n            const b = (undampedFreq - velocity) * duration + 1;\n            return -safeMin + a * b;\n        };\n        derivative = (undampedFreq) => {\n            const a = Math.exp(-undampedFreq * duration);\n            const b = (velocity - undampedFreq) * (duration * duration);\n            return a * b;\n        };\n    }\n    const initialGuess = 5 / duration;\n    const undampedFreq = approximateRoot(envelope, derivative, initialGuess);\n    duration = duration * 1000;\n    if (isNaN(undampedFreq)) {\n        return {\n            stiffness: 100,\n            damping: 10,\n            duration,\n        };\n    }\n    else {\n        const stiffness = Math.pow(undampedFreq, 2) * mass;\n        return {\n            stiffness,\n            damping: dampingRatio * 2 * Math.sqrt(mass * stiffness),\n            duration,\n        };\n    }\n}\nconst rootIterations = 12;\nfunction approximateRoot(envelope, derivative, initialGuess) {\n    let result = initialGuess;\n    for (let i = 1; i < rootIterations; i++) {\n        result = result - envelope(result) / derivative(result);\n    }\n    return result;\n}\nfunction calcAngularFreq(undampedFreq, dampingRatio) {\n    return undampedFreq * Math.sqrt(1 - dampingRatio * dampingRatio);\n}\n\nconst durationKeys = [\"duration\", \"bounce\"];\nconst physicsKeys = [\"stiffness\", \"damping\", \"mass\"];\nfunction isSpringType(options, keys) {\n    return keys.some((key) => options[key] !== undefined);\n}\nfunction getSpringOptions(options) {\n    let springOptions = Object.assign({ velocity: 0.0, stiffness: 100, damping: 10, mass: 1.0, isResolvedFromDuration: false }, options);\n    if (!isSpringType(options, physicsKeys) &&\n        isSpringType(options, durationKeys)) {\n        const derived = findSpring(options);\n        springOptions = Object.assign(Object.assign(Object.assign({}, springOptions), derived), { velocity: 0.0, mass: 1.0 });\n        springOptions.isResolvedFromDuration = true;\n    }\n    return springOptions;\n}\nfunction spring(_a) {\n    var { from = 0.0, to = 1.0, restSpeed = 2, restDelta } = _a, options = tslib.__rest(_a, [\"from\", \"to\", \"restSpeed\", \"restDelta\"]);\n    const state = { done: false, value: from };\n    let { stiffness, damping, mass, velocity, duration, isResolvedFromDuration, } = getSpringOptions(options);\n    let resolveSpring = zero;\n    let resolveVelocity = zero;\n    function createSpring() {\n        const initialVelocity = velocity ? -(velocity / 1000) : 0.0;\n        const initialDelta = to - from;\n        const dampingRatio = damping / (2 * Math.sqrt(stiffness * mass));\n        const undampedAngularFreq = Math.sqrt(stiffness / mass) / 1000;\n        if (restDelta === undefined) {\n            restDelta = Math.min(Math.abs(to - from) / 100, 0.4);\n        }\n        if (dampingRatio < 1) {\n            const angularFreq = calcAngularFreq(undampedAngularFreq, dampingRatio);\n            resolveSpring = (t) => {\n                const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);\n                return (to -\n                    envelope *\n                        (((initialVelocity +\n                            dampingRatio * undampedAngularFreq * initialDelta) /\n                            angularFreq) *\n                            Math.sin(angularFreq * t) +\n                            initialDelta * Math.cos(angularFreq * t)));\n            };\n            resolveVelocity = (t) => {\n                const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);\n                return (dampingRatio *\n                    undampedAngularFreq *\n                    envelope *\n                    ((Math.sin(angularFreq * t) *\n                        (initialVelocity +\n                            dampingRatio *\n                                undampedAngularFreq *\n                                initialDelta)) /\n                        angularFreq +\n                        initialDelta * Math.cos(angularFreq * t)) -\n                    envelope *\n                        (Math.cos(angularFreq * t) *\n                            (initialVelocity +\n                                dampingRatio *\n                                    undampedAngularFreq *\n                                    initialDelta) -\n                            angularFreq *\n                                initialDelta *\n                                Math.sin(angularFreq * t)));\n            };\n        }\n        else if (dampingRatio === 1) {\n            resolveSpring = (t) => to -\n                Math.exp(-undampedAngularFreq * t) *\n                    (initialDelta +\n                        (initialVelocity + undampedAngularFreq * initialDelta) *\n                            t);\n        }\n        else {\n            const dampedAngularFreq = undampedAngularFreq * Math.sqrt(dampingRatio * dampingRatio - 1);\n            resolveSpring = (t) => {\n                const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);\n                const freqForT = Math.min(dampedAngularFreq * t, 300);\n                return (to -\n                    (envelope *\n                        ((initialVelocity +\n                            dampingRatio * undampedAngularFreq * initialDelta) *\n                            Math.sinh(freqForT) +\n                            dampedAngularFreq *\n                                initialDelta *\n                                Math.cosh(freqForT))) /\n                        dampedAngularFreq);\n            };\n        }\n    }\n    createSpring();\n    return {\n        next: (t) => {\n            const current = resolveSpring(t);\n            if (!isResolvedFromDuration) {\n                const currentVelocity = resolveVelocity(t) * 1000;\n                const isBelowVelocityThreshold = Math.abs(currentVelocity) <= restSpeed;\n                const isBelowDisplacementThreshold = Math.abs(to - current) <= restDelta;\n                state.done =\n                    isBelowVelocityThreshold && isBelowDisplacementThreshold;\n            }\n            else {\n                state.done = t >= duration;\n            }\n            state.value = state.done ? to : current;\n            return state;\n        },\n        flipTarget: () => {\n            velocity = -velocity;\n            [from, to] = [to, from];\n            createSpring();\n        },\n    };\n}\nspring.needsInterpolation = (a, b) => typeof a === \"string\" || typeof b === \"string\";\nconst zero = (_t) => 0;\n\nconst progress = (from, to, value) => {\n    const toFromDifference = to - from;\n    return toFromDifference === 0 ? 1 : (value - from) / toFromDifference;\n};\n\nconst mix = (from, to, progress) => -progress * from + progress * to + from;\n\nfunction hueToRgb(p, q, t) {\n    if (t < 0)\n        t += 1;\n    if (t > 1)\n        t -= 1;\n    if (t < 1 / 6)\n        return p + (q - p) * 6 * t;\n    if (t < 1 / 2)\n        return q;\n    if (t < 2 / 3)\n        return p + (q - p) * (2 / 3 - t) * 6;\n    return p;\n}\nfunction hslaToRgba({ hue, saturation, lightness, alpha }) {\n    hue /= 360;\n    saturation /= 100;\n    lightness /= 100;\n    let red = 0;\n    let green = 0;\n    let blue = 0;\n    if (!saturation) {\n        red = green = blue = lightness;\n    }\n    else {\n        const q = lightness < 0.5\n            ? lightness * (1 + saturation)\n            : lightness + saturation - lightness * saturation;\n        const p = 2 * lightness - q;\n        red = hueToRgb(p, q, hue + 1 / 3);\n        green = hueToRgb(p, q, hue);\n        blue = hueToRgb(p, q, hue - 1 / 3);\n    }\n    return {\n        red: Math.round(red * 255),\n        green: Math.round(green * 255),\n        blue: Math.round(blue * 255),\n        alpha,\n    };\n}\n\nconst mixLinearColor = (from, to, v) => {\n    const fromExpo = from * from;\n    const toExpo = to * to;\n    return Math.sqrt(Math.max(0, v * (toExpo - fromExpo) + fromExpo));\n};\nconst colorTypes = [styleValueTypes.hex, styleValueTypes.rgba, styleValueTypes.hsla];\nconst getColorType = (v) => colorTypes.find((type) => type.test(v));\nconst notAnimatable = (color) => `'${color}' is not an animatable color. Use the equivalent color code instead.`;\nconst mixColor = (from, to) => {\n    let fromColorType = getColorType(from);\n    let toColorType = getColorType(to);\n    heyListen.invariant(!!fromColorType, notAnimatable(from));\n    heyListen.invariant(!!toColorType, notAnimatable(to));\n    let fromColor = fromColorType.parse(from);\n    let toColor = toColorType.parse(to);\n    if (fromColorType === styleValueTypes.hsla) {\n        fromColor = hslaToRgba(fromColor);\n        fromColorType = styleValueTypes.rgba;\n    }\n    if (toColorType === styleValueTypes.hsla) {\n        toColor = hslaToRgba(toColor);\n        toColorType = styleValueTypes.rgba;\n    }\n    const blended = Object.assign({}, fromColor);\n    return (v) => {\n        for (const key in blended) {\n            if (key !== \"alpha\") {\n                blended[key] = mixLinearColor(fromColor[key], toColor[key], v);\n            }\n        }\n        blended.alpha = mix(fromColor.alpha, toColor.alpha, v);\n        return fromColorType.transform(blended);\n    };\n};\n\nconst zeroPoint = {\n    x: 0,\n    y: 0,\n    z: 0\n};\nconst isNum = (v) => typeof v === 'number';\n\nconst combineFunctions = (a, b) => (v) => b(a(v));\nconst pipe = (...transformers) => transformers.reduce(combineFunctions);\n\nfunction getMixer(origin, target) {\n    if (isNum(origin)) {\n        return (v) => mix(origin, target, v);\n    }\n    else if (styleValueTypes.color.test(origin)) {\n        return mixColor(origin, target);\n    }\n    else {\n        return mixComplex(origin, target);\n    }\n}\nconst mixArray = (from, to) => {\n    const output = [...from];\n    const numValues = output.length;\n    const blendValue = from.map((fromThis, i) => getMixer(fromThis, to[i]));\n    return (v) => {\n        for (let i = 0; i < numValues; i++) {\n            output[i] = blendValue[i](v);\n        }\n        return output;\n    };\n};\nconst mixObject = (origin, target) => {\n    const output = Object.assign(Object.assign({}, origin), target);\n    const blendValue = {};\n    for (const key in output) {\n        if (origin[key] !== undefined && target[key] !== undefined) {\n            blendValue[key] = getMixer(origin[key], target[key]);\n        }\n    }\n    return (v) => {\n        for (const key in blendValue) {\n            output[key] = blendValue[key](v);\n        }\n        return output;\n    };\n};\nfunction analyse(value) {\n    const parsed = styleValueTypes.complex.parse(value);\n    const numValues = parsed.length;\n    let numNumbers = 0;\n    let numRGB = 0;\n    let numHSL = 0;\n    for (let i = 0; i < numValues; i++) {\n        if (numNumbers || typeof parsed[i] === \"number\") {\n            numNumbers++;\n        }\n        else {\n            if (parsed[i].hue !== undefined) {\n                numHSL++;\n            }\n            else {\n                numRGB++;\n            }\n        }\n    }\n    return { parsed, numNumbers, numRGB, numHSL };\n}\nconst mixComplex = (origin, target) => {\n    const template = styleValueTypes.complex.createTransformer(target);\n    const originStats = analyse(origin);\n    const targetStats = analyse(target);\n    const canInterpolate = originStats.numHSL === targetStats.numHSL &&\n        originStats.numRGB === targetStats.numRGB &&\n        originStats.numNumbers >= targetStats.numNumbers;\n    if (canInterpolate) {\n        return pipe(mixArray(originStats.parsed, targetStats.parsed), template);\n    }\n    else {\n        heyListen.warning(true, `Complex values '${origin}' and '${target}' too different to mix. Ensure all colors are of the same type, and that each contains the same quantity of number and color values. Falling back to instant transition.`);\n        return (p) => `${p > 0 ? target : origin}`;\n    }\n};\n\nconst mixNumber = (from, to) => (p) => mix(from, to, p);\nfunction detectMixerFactory(v) {\n    if (typeof v === 'number') {\n        return mixNumber;\n    }\n    else if (typeof v === 'string') {\n        if (styleValueTypes.color.test(v)) {\n            return mixColor;\n        }\n        else {\n            return mixComplex;\n        }\n    }\n    else if (Array.isArray(v)) {\n        return mixArray;\n    }\n    else if (typeof v === 'object') {\n        return mixObject;\n    }\n}\nfunction createMixers(output, ease, customMixer) {\n    const mixers = [];\n    const mixerFactory = customMixer || detectMixerFactory(output[0]);\n    const numMixers = output.length - 1;\n    for (let i = 0; i < numMixers; i++) {\n        let mixer = mixerFactory(output[i], output[i + 1]);\n        if (ease) {\n            const easingFunction = Array.isArray(ease) ? ease[i] : ease;\n            mixer = pipe(easingFunction, mixer);\n        }\n        mixers.push(mixer);\n    }\n    return mixers;\n}\nfunction fastInterpolate([from, to], [mixer]) {\n    return (v) => mixer(progress(from, to, v));\n}\nfunction slowInterpolate(input, mixers) {\n    const inputLength = input.length;\n    const lastInputIndex = inputLength - 1;\n    return (v) => {\n        let mixerIndex = 0;\n        let foundMixerIndex = false;\n        if (v <= input[0]) {\n            foundMixerIndex = true;\n        }\n        else if (v >= input[lastInputIndex]) {\n            mixerIndex = lastInputIndex - 1;\n            foundMixerIndex = true;\n        }\n        if (!foundMixerIndex) {\n            let i = 1;\n            for (; i < inputLength; i++) {\n                if (input[i] > v || i === lastInputIndex) {\n                    break;\n                }\n            }\n            mixerIndex = i - 1;\n        }\n        const progressInRange = progress(input[mixerIndex], input[mixerIndex + 1], v);\n        return mixers[mixerIndex](progressInRange);\n    };\n}\nfunction interpolate(input, output, { clamp: isClamp = true, ease, mixer } = {}) {\n    const inputLength = input.length;\n    heyListen.invariant(inputLength === output.length, 'Both input and output ranges must be the same length');\n    heyListen.invariant(!ease || !Array.isArray(ease) || ease.length === inputLength - 1, 'Array of easing functions must be of length `input.length - 1`, as it applies to the transitions **between** the defined values.');\n    if (input[0] > input[inputLength - 1]) {\n        input = [].concat(input);\n        output = [].concat(output);\n        input.reverse();\n        output.reverse();\n    }\n    const mixers = createMixers(output, ease, mixer);\n    const interpolator = inputLength === 2\n        ? fastInterpolate(input, mixers)\n        : slowInterpolate(input, mixers);\n    return isClamp\n        ? (v) => interpolator(clamp(input[0], input[inputLength - 1], v))\n        : interpolator;\n}\n\nconst reverseEasing = easing => p => 1 - easing(1 - p);\nconst mirrorEasing = easing => p => p <= 0.5 ? easing(2 * p) / 2 : (2 - easing(2 * (1 - p))) / 2;\nconst createExpoIn = (power) => p => Math.pow(p, power);\nconst createBackIn = (power) => p => p * p * ((power + 1) * p - power);\nconst createAnticipate = (power) => {\n    const backEasing = createBackIn(power);\n    return p => (p *= 2) < 1\n        ? 0.5 * backEasing(p)\n        : 0.5 * (2 - Math.pow(2, -10 * (p - 1)));\n};\n\nconst DEFAULT_OVERSHOOT_STRENGTH = 1.525;\nconst BOUNCE_FIRST_THRESHOLD = 4.0 / 11.0;\nconst BOUNCE_SECOND_THRESHOLD = 8.0 / 11.0;\nconst BOUNCE_THIRD_THRESHOLD = 9.0 / 10.0;\nconst linear = p => p;\nconst easeIn = createExpoIn(2);\nconst easeOut = reverseEasing(easeIn);\nconst easeInOut = mirrorEasing(easeIn);\nconst circIn = p => 1 - Math.sin(Math.acos(p));\nconst circOut = reverseEasing(circIn);\nconst circInOut = mirrorEasing(circOut);\nconst backIn = createBackIn(DEFAULT_OVERSHOOT_STRENGTH);\nconst backOut = reverseEasing(backIn);\nconst backInOut = mirrorEasing(backIn);\nconst anticipate = createAnticipate(DEFAULT_OVERSHOOT_STRENGTH);\nconst ca = 4356.0 / 361.0;\nconst cb = 35442.0 / 1805.0;\nconst cc = 16061.0 / 1805.0;\nconst bounceOut = (p) => {\n    if (p === 1 || p === 0)\n        return p;\n    const p2 = p * p;\n    return p < BOUNCE_FIRST_THRESHOLD\n        ? 7.5625 * p2\n        : p < BOUNCE_SECOND_THRESHOLD\n            ? 9.075 * p2 - 9.9 * p + 3.4\n            : p < BOUNCE_THIRD_THRESHOLD\n                ? ca * p2 - cb * p + cc\n                : 10.8 * p * p - 20.52 * p + 10.72;\n};\nconst bounceIn = reverseEasing(bounceOut);\nconst bounceInOut = (p) => p < 0.5\n    ? 0.5 * (1.0 - bounceOut(1.0 - p * 2.0))\n    : 0.5 * bounceOut(p * 2.0 - 1.0) + 0.5;\n\nfunction defaultEasing(values, easing) {\n    return values.map(() => easing || easeInOut).splice(0, values.length - 1);\n}\nfunction defaultOffset(values) {\n    const numValues = values.length;\n    return values.map((_value, i) => i !== 0 ? i / (numValues - 1) : 0);\n}\nfunction convertOffsetToTimes(offset, duration) {\n    return offset.map((o) => o * duration);\n}\nfunction keyframes({ from = 0, to = 1, ease, offset, duration = 300, }) {\n    const state = { done: false, value: from };\n    const values = Array.isArray(to) ? to : [from, to];\n    const times = convertOffsetToTimes(offset && offset.length === values.length\n        ? offset\n        : defaultOffset(values), duration);\n    function createInterpolator() {\n        return interpolate(times, values, {\n            ease: Array.isArray(ease) ? ease : defaultEasing(values, ease),\n        });\n    }\n    let interpolator = createInterpolator();\n    return {\n        next: (t) => {\n            state.value = interpolator(t);\n            state.done = t >= duration;\n            return state;\n        },\n        flipTarget: () => {\n            values.reverse();\n            interpolator = createInterpolator();\n        },\n    };\n}\n\nfunction decay({ velocity = 0, from = 0, power = 0.8, timeConstant = 350, restDelta = 0.5, modifyTarget, }) {\n    const state = { done: false, value: from };\n    let amplitude = power * velocity;\n    const ideal = from + amplitude;\n    const target = modifyTarget === undefined ? ideal : modifyTarget(ideal);\n    if (target !== ideal)\n        amplitude = target - from;\n    return {\n        next: (t) => {\n            const delta = -amplitude * Math.exp(-t / timeConstant);\n            state.done = !(delta > restDelta || delta < -restDelta);\n            state.value = state.done ? target : target + delta;\n            return state;\n        },\n        flipTarget: () => { },\n    };\n}\n\nconst types = { keyframes, spring, decay };\nfunction detectAnimationFromOptions(config) {\n    if (Array.isArray(config.to)) {\n        return keyframes;\n    }\n    else if (types[config.type]) {\n        return types[config.type];\n    }\n    const keys = new Set(Object.keys(config));\n    if (keys.has(\"ease\") ||\n        (keys.has(\"duration\") && !keys.has(\"dampingRatio\"))) {\n        return keyframes;\n    }\n    else if (keys.has(\"dampingRatio\") ||\n        keys.has(\"stiffness\") ||\n        keys.has(\"mass\") ||\n        keys.has(\"damping\") ||\n        keys.has(\"restSpeed\") ||\n        keys.has(\"restDelta\")) {\n        return spring;\n    }\n    return keyframes;\n}\n\nfunction loopElapsed(elapsed, duration, delay = 0) {\n    return elapsed - duration - delay;\n}\nfunction reverseElapsed(elapsed, duration, delay = 0, isForwardPlayback = true) {\n    return isForwardPlayback\n        ? loopElapsed(duration + -elapsed, duration, delay)\n        : duration - (elapsed - duration) + delay;\n}\nfunction hasRepeatDelayElapsed(elapsed, duration, delay, isForwardPlayback) {\n    return isForwardPlayback ? elapsed >= duration + delay : elapsed <= -delay;\n}\n\nconst framesync = (update) => {\n    const passTimestamp = ({ delta }) => update(delta);\n    return {\n        start: () => sync__default[\"default\"].update(passTimestamp, true),\n        stop: () => sync.cancelSync.update(passTimestamp),\n    };\n};\nfunction animate(_a) {\n    var _b, _c;\n    var { from, autoplay = true, driver = framesync, elapsed = 0, repeat: repeatMax = 0, repeatType = \"loop\", repeatDelay = 0, onPlay, onStop, onComplete, onRepeat, onUpdate } = _a, options = tslib.__rest(_a, [\"from\", \"autoplay\", \"driver\", \"elapsed\", \"repeat\", \"repeatType\", \"repeatDelay\", \"onPlay\", \"onStop\", \"onComplete\", \"onRepeat\", \"onUpdate\"]);\n    let { to } = options;\n    let driverControls;\n    let repeatCount = 0;\n    let computedDuration = options.duration;\n    let latest;\n    let isComplete = false;\n    let isForwardPlayback = true;\n    let interpolateFromNumber;\n    const animator = detectAnimationFromOptions(options);\n    if ((_c = (_b = animator).needsInterpolation) === null || _c === void 0 ? void 0 : _c.call(_b, from, to)) {\n        interpolateFromNumber = interpolate([0, 100], [from, to], {\n            clamp: false,\n        });\n        from = 0;\n        to = 100;\n    }\n    const animation = animator(Object.assign(Object.assign({}, options), { from, to }));\n    function repeat() {\n        repeatCount++;\n        if (repeatType === \"reverse\") {\n            isForwardPlayback = repeatCount % 2 === 0;\n            elapsed = reverseElapsed(elapsed, computedDuration, repeatDelay, isForwardPlayback);\n        }\n        else {\n            elapsed = loopElapsed(elapsed, computedDuration, repeatDelay);\n            if (repeatType === \"mirror\")\n                animation.flipTarget();\n        }\n        isComplete = false;\n        onRepeat && onRepeat();\n    }\n    function complete() {\n        driverControls.stop();\n        onComplete && onComplete();\n    }\n    function update(delta) {\n        if (!isForwardPlayback)\n            delta = -delta;\n        elapsed += delta;\n        if (!isComplete) {\n            const state = animation.next(Math.max(0, elapsed));\n            latest = state.value;\n            if (interpolateFromNumber)\n                latest = interpolateFromNumber(latest);\n            isComplete = isForwardPlayback ? state.done : elapsed <= 0;\n        }\n        onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(latest);\n        if (isComplete) {\n            if (repeatCount === 0)\n                computedDuration !== null && computedDuration !== void 0 ? computedDuration : (computedDuration = elapsed);\n            if (repeatCount < repeatMax) {\n                hasRepeatDelayElapsed(elapsed, computedDuration, repeatDelay, isForwardPlayback) && repeat();\n            }\n            else {\n                complete();\n            }\n        }\n    }\n    function play() {\n        onPlay === null || onPlay === void 0 ? void 0 : onPlay();\n        driverControls = driver(update);\n        driverControls.start();\n    }\n    autoplay && play();\n    return {\n        stop: () => {\n            onStop === null || onStop === void 0 ? void 0 : onStop();\n            driverControls.stop();\n        },\n    };\n}\n\nfunction velocityPerSecond(velocity, frameDuration) {\n    return frameDuration ? velocity * (1000 / frameDuration) : 0;\n}\n\nfunction inertia({ from = 0, velocity = 0, min, max, power = 0.8, timeConstant = 750, bounceStiffness = 500, bounceDamping = 10, restDelta = 1, modifyTarget, driver, onUpdate, onComplete, onStop, }) {\n    let currentAnimation;\n    function isOutOfBounds(v) {\n        return (min !== undefined && v < min) || (max !== undefined && v > max);\n    }\n    function boundaryNearest(v) {\n        if (min === undefined)\n            return max;\n        if (max === undefined)\n            return min;\n        return Math.abs(min - v) < Math.abs(max - v) ? min : max;\n    }\n    function startAnimation(options) {\n        currentAnimation === null || currentAnimation === void 0 ? void 0 : currentAnimation.stop();\n        currentAnimation = animate(Object.assign(Object.assign({}, options), { driver, onUpdate: (v) => {\n                var _a;\n                onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(v);\n                (_a = options.onUpdate) === null || _a === void 0 ? void 0 : _a.call(options, v);\n            }, onComplete,\n            onStop }));\n    }\n    function startSpring(options) {\n        startAnimation(Object.assign({ type: \"spring\", stiffness: bounceStiffness, damping: bounceDamping, restDelta }, options));\n    }\n    if (isOutOfBounds(from)) {\n        startSpring({ from, velocity, to: boundaryNearest(from) });\n    }\n    else {\n        let target = power * velocity + from;\n        if (typeof modifyTarget !== \"undefined\")\n            target = modifyTarget(target);\n        const boundary = boundaryNearest(target);\n        const heading = boundary === min ? -1 : 1;\n        let prev;\n        let current;\n        const checkBoundary = (v) => {\n            prev = current;\n            current = v;\n            velocity = velocityPerSecond(v - prev, sync.getFrameData().delta);\n            if ((heading === 1 && v > boundary) ||\n                (heading === -1 && v < boundary)) {\n                startSpring({ from: v, to: boundary, velocity });\n            }\n        };\n        startAnimation({\n            type: \"decay\",\n            from,\n            velocity,\n            timeConstant,\n            power,\n            restDelta,\n            modifyTarget,\n            onUpdate: isOutOfBounds(target) ? checkBoundary : undefined,\n        });\n    }\n    return {\n        stop: () => currentAnimation === null || currentAnimation === void 0 ? void 0 : currentAnimation.stop(),\n    };\n}\n\nconst radiansToDegrees = (radians) => (radians * 180) / Math.PI;\n\nconst angle = (a, b = zeroPoint) => radiansToDegrees(Math.atan2(b.y - a.y, b.x - a.x));\n\nconst applyOffset = (from, to) => {\n    let hasReceivedFrom = true;\n    if (to === undefined) {\n        to = from;\n        hasReceivedFrom = false;\n    }\n    return (v) => {\n        if (hasReceivedFrom) {\n            return v - from + to;\n        }\n        else {\n            from = v;\n            hasReceivedFrom = true;\n            return to;\n        }\n    };\n};\n\nconst identity = (v) => v;\nconst createAttractor = (alterDisplacement = identity) => (constant, origin, v) => {\n    const displacement = origin - v;\n    const springModifiedDisplacement = -(0 - constant + 1) * (0 - alterDisplacement(Math.abs(displacement)));\n    return displacement <= 0\n        ? origin + springModifiedDisplacement\n        : origin - springModifiedDisplacement;\n};\nconst attract = createAttractor();\nconst attractExpo = createAttractor(Math.sqrt);\n\nconst degreesToRadians = (degrees) => (degrees * Math.PI) / 180;\n\nconst isPoint = (point) => point.hasOwnProperty('x') && point.hasOwnProperty('y');\n\nconst isPoint3D = (point) => isPoint(point) && point.hasOwnProperty('z');\n\nconst distance1D = (a, b) => Math.abs(a - b);\nfunction distance(a, b) {\n    if (isNum(a) && isNum(b)) {\n        return distance1D(a, b);\n    }\n    else if (isPoint(a) && isPoint(b)) {\n        const xDelta = distance1D(a.x, b.x);\n        const yDelta = distance1D(a.y, b.y);\n        const zDelta = isPoint3D(a) && isPoint3D(b) ? distance1D(a.z, b.z) : 0;\n        return Math.sqrt(Math.pow(xDelta, 2) + Math.pow(yDelta, 2) + Math.pow(zDelta, 2));\n    }\n}\n\nconst pointFromVector = (origin, angle, distance) => {\n    angle = degreesToRadians(angle);\n    return {\n        x: distance * Math.cos(angle) + origin.x,\n        y: distance * Math.sin(angle) + origin.y\n    };\n};\n\nconst toDecimal = (num, precision = 2) => {\n    precision = Math.pow(10, precision);\n    return Math.round(num * precision) / precision;\n};\n\nconst smoothFrame = (prevValue, nextValue, duration, smoothing = 0) => toDecimal(prevValue +\n    (duration * (nextValue - prevValue)) / Math.max(smoothing, duration));\n\nconst smooth = (strength = 50) => {\n    let previousValue = 0;\n    let lastUpdated = 0;\n    return (v) => {\n        const currentFramestamp = sync.getFrameData().timestamp;\n        const timeDelta = currentFramestamp !== lastUpdated ? currentFramestamp - lastUpdated : 0;\n        const newValue = timeDelta\n            ? smoothFrame(previousValue, v, timeDelta, strength)\n            : previousValue;\n        lastUpdated = currentFramestamp;\n        previousValue = newValue;\n        return newValue;\n    };\n};\n\nconst snap = (points) => {\n    if (typeof points === 'number') {\n        return (v) => Math.round(v / points) * points;\n    }\n    else {\n        let i = 0;\n        const numPoints = points.length;\n        return (v) => {\n            let lastDistance = Math.abs(points[0] - v);\n            for (i = 1; i < numPoints; i++) {\n                const point = points[i];\n                const distance = Math.abs(point - v);\n                if (distance === 0)\n                    return point;\n                if (distance > lastDistance)\n                    return points[i - 1];\n                if (i === numPoints - 1)\n                    return point;\n                lastDistance = distance;\n            }\n        };\n    }\n};\n\nfunction velocityPerFrame(xps, frameDuration) {\n    return xps / (1000 / frameDuration);\n}\n\nconst wrap = (min, max, v) => {\n    const rangeSize = max - min;\n    return ((((v - min) % rangeSize) + rangeSize) % rangeSize) + min;\n};\n\nconst a = (a1, a2) => 1.0 - 3.0 * a2 + 3.0 * a1;\nconst b = (a1, a2) => 3.0 * a2 - 6.0 * a1;\nconst c = (a1) => 3.0 * a1;\nconst calcBezier = (t, a1, a2) => ((a(a1, a2) * t + b(a1, a2)) * t + c(a1)) * t;\nconst getSlope = (t, a1, a2) => 3.0 * a(a1, a2) * t * t + 2.0 * b(a1, a2) * t + c(a1);\nconst subdivisionPrecision = 0.0000001;\nconst subdivisionMaxIterations = 10;\nfunction binarySubdivide(aX, aA, aB, mX1, mX2) {\n    let currentX;\n    let currentT;\n    let i = 0;\n    do {\n        currentT = aA + (aB - aA) / 2.0;\n        currentX = calcBezier(currentT, mX1, mX2) - aX;\n        if (currentX > 0.0) {\n            aB = currentT;\n        }\n        else {\n            aA = currentT;\n        }\n    } while (Math.abs(currentX) > subdivisionPrecision &&\n        ++i < subdivisionMaxIterations);\n    return currentT;\n}\nconst newtonIterations = 8;\nconst newtonMinSlope = 0.001;\nfunction newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {\n    for (let i = 0; i < newtonIterations; ++i) {\n        const currentSlope = getSlope(aGuessT, mX1, mX2);\n        if (currentSlope === 0.0) {\n            return aGuessT;\n        }\n        const currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n        aGuessT -= currentX / currentSlope;\n    }\n    return aGuessT;\n}\nconst kSplineTableSize = 11;\nconst kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\nfunction cubicBezier(mX1, mY1, mX2, mY2) {\n    if (mX1 === mY1 && mX2 === mY2)\n        return linear;\n    const sampleValues = new Float32Array(kSplineTableSize);\n    for (let i = 0; i < kSplineTableSize; ++i) {\n        sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n    }\n    function getTForX(aX) {\n        let intervalStart = 0.0;\n        let currentSample = 1;\n        const lastSample = kSplineTableSize - 1;\n        for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {\n            intervalStart += kSampleStepSize;\n        }\n        --currentSample;\n        const dist = (aX - sampleValues[currentSample]) /\n            (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n        const guessForT = intervalStart + dist * kSampleStepSize;\n        const initialSlope = getSlope(guessForT, mX1, mX2);\n        if (initialSlope >= newtonMinSlope) {\n            return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n        }\n        else if (initialSlope === 0.0) {\n            return guessForT;\n        }\n        else {\n            return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);\n        }\n    }\n    return (t) => t === 0 || t === 1 ? t : calcBezier(getTForX(t), mY1, mY2);\n}\n\nconst steps = (steps, direction = 'end') => (progress) => {\n    progress =\n        direction === 'end' ? Math.min(progress, 0.999) : Math.max(progress, 0.001);\n    const expanded = progress * steps;\n    const rounded = direction === 'end' ? Math.floor(expanded) : Math.ceil(expanded);\n    return clamp(0, 1, rounded / steps);\n};\n\nexports.angle = angle;\nexports.animate = animate;\nexports.anticipate = anticipate;\nexports.applyOffset = applyOffset;\nexports.attract = attract;\nexports.attractExpo = attractExpo;\nexports.backIn = backIn;\nexports.backInOut = backInOut;\nexports.backOut = backOut;\nexports.bounceIn = bounceIn;\nexports.bounceInOut = bounceInOut;\nexports.bounceOut = bounceOut;\nexports.circIn = circIn;\nexports.circInOut = circInOut;\nexports.circOut = circOut;\nexports.clamp = clamp;\nexports.createAnticipate = createAnticipate;\nexports.createAttractor = createAttractor;\nexports.createBackIn = createBackIn;\nexports.createExpoIn = createExpoIn;\nexports.cubicBezier = cubicBezier;\nexports.decay = decay;\nexports.degreesToRadians = degreesToRadians;\nexports.distance = distance;\nexports.easeIn = easeIn;\nexports.easeInOut = easeInOut;\nexports.easeOut = easeOut;\nexports.inertia = inertia;\nexports.interpolate = interpolate;\nexports.isPoint = isPoint;\nexports.isPoint3D = isPoint3D;\nexports.keyframes = keyframes;\nexports.linear = linear;\nexports.mirrorEasing = mirrorEasing;\nexports.mix = mix;\nexports.mixColor = mixColor;\nexports.mixComplex = mixComplex;\nexports.pipe = pipe;\nexports.pointFromVector = pointFromVector;\nexports.progress = progress;\nexports.radiansToDegrees = radiansToDegrees;\nexports.reverseEasing = reverseEasing;\nexports.smooth = smooth;\nexports.smoothFrame = smoothFrame;\nexports.snap = snap;\nexports.spring = spring;\nexports.steps = steps;\nexports.toDecimal = toDecimal;\nexports.velocityPerFrame = velocityPerFrame;\nexports.velocityPerSecond = velocityPerSecond;\nexports.wrap = wrap;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}